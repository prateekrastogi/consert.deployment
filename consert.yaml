#Valid for kubectl 1.6.4 & kubernetes 1.6.4
#Very flaky default api-Versioning provided. Take extreme caution while changing api-Version fields. It is different from what was stated in docs.
#Deployment takes some time to properly deploy and connect all components with each other. Have some patience while staging.


# Creating service for frontend
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend                    #selection of service by label
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 3000                #the port on the concerned cluster pods that needs to be attached to service
  loadBalancerIP: 104.197.178.214
  type: LoadBalancer                #for opening to cloud provider loadbalancer i.e. public

---

#Deploying frontend on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: frontend          #labels for service selector to work properly
    spec:
      containers:
      - name: frontend
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-frontend:af0726ca289446b067cd9bbcdd78e32e7afa5ff9
        ports:
        - containerPort: 3000    #opens port for the other pods of kubernetes cluster

---

# Creating service for backend
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend                    #selection of service by label
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 3100                #the port on the concerned cluster pods that needs to be attached to service
  loadBalancerIP: 104.198.186.205
  type: LoadBalancer                      #Exposes the service on each Nodeâ€™s IP at a static port

---

#Deploying backend on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1 #tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: backend          #labels for service selector to work properly
    spec:
      containers:
      - name: backend
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-backend:5c0a6fe6a2d5f353ec2ca7bcb49a36a9eff8c4b9
        ports:
        - containerPort: 3100    #opens port for the other pods of kubernetes cluster

---

# Creating service for seeder
apiVersion: v1
kind: Service
metadata:
  name: seeder
spec:
  selector:
    app: seeder                    #selection of service by label
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 3200                #the port on the concerned cluster pods that needs to be attached to service
  loadBalancerIP: 23.251.150.157
  type: LoadBalancer

---

#Deploying seeder on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: seeder-deployment
spec:
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: seeder          #labels for service selector to work properly
    spec:
      containers:
      - name: seeder
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-seeder:15aedc6db4c36c761113bc6d5716a3380f0a059a
        ports:
        - containerPort: 3200    #opens port for the other pods of kubernetes cluster

---

# Creating StorageClass for mongodb
apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: mongodb
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd

---

#Creating Mongo Service
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    name: mongo
spec:
  selector:
    role: mongo
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None

---

#Deploying mongodb cluster with StatefulSets
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: "mongo"
  replicas: 3
  template:
    metadata:
      labels:
        role: mongo
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mongo
          image: mongo
          command:
            - mongod
            - "--replSet"
            - rs0
            - "--smallfiles"
            - "--noprealloc"
            - "--enableMajorityReadConcern"
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/mongodb
        - name: mongo-sidecar
          image: cvallance/mongo-k8s-sidecar
          env:
            - name: MONGO_SIDECAR_POD_LABELS
              value: "role=mongo"
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
      annotations:
        volume.beta.kubernetes.io/storage-class: "mongodb"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 32Gi
