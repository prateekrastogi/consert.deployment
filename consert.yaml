#Valid for kubectl 1.6.4 & kubernetes 1.6.4
#Very flaky default api-Versioning provided. Take extreme caution while changing api-Version fields. It is different from what was stated in docs.
#Deployment takes some time to properly deploy and connect all components with each other. Have some patience while staging.


# Creating service for frontend
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend                    #selection of service by label
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 3000                #the port on the concerned cluster pods that needs to be attached to service
  loadBalancerIP: 104.197.178.214
  type: LoadBalancer                #for opening to cloud provider loadbalancer i.e. public

---

#Deploying frontend on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: frontend          #labels for service selector to work properly
    spec:
      containers:
      - name: frontend
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-frontend:e0ff2bb40c15933dd8b604cbfe62c95d5cd8da75
        ports:
        - containerPort: 3000    #opens port for the other pods of kubernetes cluster

---

# Creating service for backend
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend                    #selection of service by label
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 3100                #the port on the concerned cluster pods that needs to be attached to service
  loadBalancerIP: 104.198.186.205
  type: LoadBalancer                      #Exposes the service on each Nodeâ€™s IP at a static port

---

#Deploying backend on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1 #tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: backend          #labels for service selector to work properly
    spec:
      containers:
      - name: backend
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-backend:df043e92d6a582e781ca2f72f56dbf6b708d0a90
        ports:
        - containerPort: 3100    #opens port for the other pods of kubernetes cluster

---

# Creating service for seeder
apiVersion: v1
kind: Service
metadata:
  name: seeder
spec:
  selector:
    app: seeder                    #selection of service by label
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 3200                #the port on the concerned cluster pods that needs to be attached to service
  loadBalancerIP: 23.251.150.157
  type: LoadBalancer

---

#Deploying seeder on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: seeder-deployment
spec:
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: seeder          #labels for service selector to work properly
    spec:
      containers:
      - name: seeder
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-seeder:15aedc6db4c36c761113bc6d5716a3380f0a059a
        ports:
        - containerPort: 3200    #opens port for the other pods of kubernetes cluster

---

# Creating StorageClass for mongodb
apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: mongodb
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd

---

#Creating Mongo Service
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    name: mongo
spec:
  selector:
    role: mongo
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None

---

#Deploying mongodb cluster with StatefulSets
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: "mongo"
  replicas: 3
  template:
    metadata:
      labels:
        role: mongo
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mongo
          image: mongo
          command:
            - mongod
            - "--replSet"
            - rs0
            - "--smallfiles"
            - "--noprealloc"
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/mongodb
        - name: mongo-sidecar
          image: cvallance/mongo-k8s-sidecar
          env:
            - name: MONGO_SIDECAR_POD_LABELS
              value: "role=mongo"
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
      annotations:
        volume.beta.kubernetes.io/storage-class: "mongodb"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 12Gi

---

kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
  name: elasticsearch
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd

---

apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  labels:
    component: elasticsearch
    role: data
spec:
  ports:
  - port: 9300
    name: transport
  clusterIP: None
  selector:
    component: elasticsearch
    role: data

---

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: elasticsearch
  labels:
    component: elasticsearch
    role: data
spec:
  serviceName: elasticsearch
  replicas: 3
  template:
    metadata:
      labels:
        component: elasticsearch
        role: data
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
          {
          "name": "sysctl",
            "image": "busybox",
            "imagePullPolicy": "IfNotPresent",
            "command": ["sysctl", "-w", "vm.max_map_count=262144"],
            "securityContext": {
              "privileged": true
            }
          }
        ]'
    spec:
      containers:
      - name: elasticsearch
        securityContext:
          privileged: true
          capabilities:
            add:
              - IPC_LOCK
        image: quay.io/pires/docker-elasticsearch-kubernetes:5.4.0
        imagePullPolicy: Always
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: "CLUSTER_NAME"
          value: "myesdb"
        - name: NODE_MASTER
          value: "false"
        - name: NODE_INGEST
          value: "false"
        - name: HTTP_ENABLE
          value: "false"
        - name: "ES_JAVA_OPTS"
          value: "-Xms256m -Xmx256m"
        ports:
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: elasticsearch-persistent-storage
          mountPath: /data/elasticsearch
  volumeClaimTemplates:
  - metadata:
      name:  elasticsearch-persistent-storage
      annotations:
        volume.beta.kubernetes.io/storage-class: elasticsearch
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 12Gi
