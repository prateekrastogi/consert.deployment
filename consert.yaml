#Valid for kubectl 1.6.6 & kubernetes 1.6.6
#Very flaky default api-Versioning provided. Take extreme caution while changing api-Version fields. It is different from what was stated in docs.
#Deployment takes some time to properly deploy and connect all components with each other. Have some patience while staging.
#Always opening the port 80, or 8080 externally due to issues revolving exposing port on loadBalancer(Both cloudflare and GCP)


# Creating service for frontend
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend                    #selection of service by label
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 3000                #the port on the concerned cluster pods that needs to be attached to service
  type: NodePort                      #Requirements for ingress

---

#Deploying frontend on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 1 # tells deployment to run no. of pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: frontend          #labels for service selector to work properly
    spec:
      containers:
      - name: frontend
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-frontend:af51d0e33cb1e59f03bae48917fb4d31bfcb3ef9
        ports:
        - containerPort: 3000    #opens port for the other pods of kubernetes cluster

---

#Horizontal Pod Scaling of frontend Deployment
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: frontend
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: frontend
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70

---

# Creating service for backend
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend                    #selection of service by label
  ports:
    - name: http
      protocol: "TCP"
      port: 80
      targetPort: 3100                #the port on the concerned cluster pods that needs to be attached to service
  type: NodePort

---

# Creating separate backend websocket service for ingress as ingress cann't take same service for two different forwarding rules
apiVersion: v1
kind: Service
metadata:
  name: backend-ws
spec:
  selector:
    app: backend                    #selection of service by label
  ports:
    - name: http
      protocol: "TCP"
      port: 80
      targetPort: 5000                #the port on the concerned cluster pods that needs to be attached to service
  type: NodePort

---

#Deploying backend on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1 #tells deployment to run no. of pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: backend          #labels for service selector to work properly
    spec:
      containers:
      - name: backend
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-backend:7f7db5924c482bd14d5681ba1cae0faa7dd85008
        ports:
        - containerPort: 3100    #opens port for the other pods of kubernetes cluster
          name: http
        - containerPort: 5000
          name: ws

---

#Horizontal Pod Scaling of backend Deployment
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: backend
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: backend
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70

---

# Creating service for seeder
apiVersion: v1
kind: Service
metadata:
  name: seeder
spec:
  selector:
    app: seeder                    #selection of service by label
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 3200             #The port on the concerned cluster pods that needs to be attached to service
  type: NodePort
---

#Deploying seeder on kubernetes cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: seeder-deployment
spec:
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: seeder          #labels for service selector to work properly
    spec:
      containers:
      - name: seeder
        image: gcr.io/consert-171717/bitbucket-prateekrastogi-seeder:aac1c4bccede731fd75b43cebc5f6d5c50f05f9c
        ports:
        - containerPort: 3200    #opens port for the other pods of kubernetes cluster

---

#Horizontal Pod Scaling of seeder Deployment
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: seeder
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: seeder
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 80

---

# MongoDb StatefulSet Deployment
# Deploying mongo from this file due to 'primary not found issue' if it is launched from separate file..
# Creating StorageClass for mongodb
apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: mongodb
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd

---

#Creating Mongo Service
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    name: mongo
spec:
  selector:
    role: mongo
  ports:
  - port: 27017                           #Mongo protocol not supported on cloudflare. Thus, no dns. so just using the gcp load balancer
    targetPort: 27017                     #the port on the concerned cluster pods that needs to be attached to service
  clusterIP: None

---

#Deploying mongodb cluster with StatefulSets
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: "mongo"
  replicas: 3
  template:
    metadata:
      labels:
        role: mongo
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mongo
          image: mongo
          command:
            - mongod
            - "--replSet"
            - rs0
            - "--smallfiles"
            - "--noprealloc"
            - "--enableMajorityReadConcern"
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/mongodb
        - name: mongo-sidecar
          image: cvallance/mongo-k8s-sidecar
          env:
            - name: MONGO_SIDECAR_POD_LABELS
              value: "role=mongo"
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
      annotations:
        volume.beta.kubernetes.io/storage-class: "mongodb"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 32Gi
